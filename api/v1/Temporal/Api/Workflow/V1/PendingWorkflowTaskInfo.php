<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: temporal/api/workflow/v1/message.proto

namespace Temporal\Api\Workflow\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>temporal.api.workflow.v1.PendingWorkflowTaskInfo</code>
 */
class PendingWorkflowTaskInfo extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>.temporal.api.enums.v1.PendingWorkflowTaskState state = 1;</code>
     */
    protected $state = 0;
    /**
     * Generated from protobuf field <code>.google.protobuf.Timestamp scheduled_time = 2 [(.gogoproto.stdtime) = true];</code>
     */
    protected $scheduled_time = null;
    /**
     * original_scheduled_time is the scheduled time of the first workflow task during workflow task heartbeat.
     * Heartbeat workflow task is done by RespondWorkflowTaskComplete with ForceCreateNewWorkflowTask == true and no command
     * In this case, OriginalScheduledTime won't change. Then when current time - original_scheduled_time exceeds
     * some threshold, the workflow task will be forced timeout.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp original_scheduled_time = 3 [(.gogoproto.stdtime) = true];</code>
     */
    protected $original_scheduled_time = null;
    /**
     * Generated from protobuf field <code>.google.protobuf.Timestamp started_time = 4 [(.gogoproto.stdtime) = true];</code>
     */
    protected $started_time = null;
    /**
     * Generated from protobuf field <code>int32 attempt = 5;</code>
     */
    protected $attempt = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $state
     *     @type \Google\Protobuf\Timestamp $scheduled_time
     *     @type \Google\Protobuf\Timestamp $original_scheduled_time
     *           original_scheduled_time is the scheduled time of the first workflow task during workflow task heartbeat.
     *           Heartbeat workflow task is done by RespondWorkflowTaskComplete with ForceCreateNewWorkflowTask == true and no command
     *           In this case, OriginalScheduledTime won't change. Then when current time - original_scheduled_time exceeds
     *           some threshold, the workflow task will be forced timeout.
     *     @type \Google\Protobuf\Timestamp $started_time
     *     @type int $attempt
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Temporal\Api\Workflow\V1\Message::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.temporal.api.enums.v1.PendingWorkflowTaskState state = 1;</code>
     * @return int
     */
    public function getState()
    {
        return $this->state;
    }

    /**
     * Generated from protobuf field <code>.temporal.api.enums.v1.PendingWorkflowTaskState state = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setState($var)
    {
        GPBUtil::checkEnum($var, \Temporal\Api\Enums\V1\PendingWorkflowTaskState::class);
        $this->state = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.google.protobuf.Timestamp scheduled_time = 2 [(.gogoproto.stdtime) = true];</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getScheduledTime()
    {
        return $this->scheduled_time;
    }

    public function hasScheduledTime()
    {
        return isset($this->scheduled_time);
    }

    public function clearScheduledTime()
    {
        unset($this->scheduled_time);
    }

    /**
     * Generated from protobuf field <code>.google.protobuf.Timestamp scheduled_time = 2 [(.gogoproto.stdtime) = true];</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setScheduledTime($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->scheduled_time = $var;

        return $this;
    }

    /**
     * original_scheduled_time is the scheduled time of the first workflow task during workflow task heartbeat.
     * Heartbeat workflow task is done by RespondWorkflowTaskComplete with ForceCreateNewWorkflowTask == true and no command
     * In this case, OriginalScheduledTime won't change. Then when current time - original_scheduled_time exceeds
     * some threshold, the workflow task will be forced timeout.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp original_scheduled_time = 3 [(.gogoproto.stdtime) = true];</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getOriginalScheduledTime()
    {
        return $this->original_scheduled_time;
    }

    public function hasOriginalScheduledTime()
    {
        return isset($this->original_scheduled_time);
    }

    public function clearOriginalScheduledTime()
    {
        unset($this->original_scheduled_time);
    }

    /**
     * original_scheduled_time is the scheduled time of the first workflow task during workflow task heartbeat.
     * Heartbeat workflow task is done by RespondWorkflowTaskComplete with ForceCreateNewWorkflowTask == true and no command
     * In this case, OriginalScheduledTime won't change. Then when current time - original_scheduled_time exceeds
     * some threshold, the workflow task will be forced timeout.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp original_scheduled_time = 3 [(.gogoproto.stdtime) = true];</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setOriginalScheduledTime($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->original_scheduled_time = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.google.protobuf.Timestamp started_time = 4 [(.gogoproto.stdtime) = true];</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getStartedTime()
    {
        return $this->started_time;
    }

    public function hasStartedTime()
    {
        return isset($this->started_time);
    }

    public function clearStartedTime()
    {
        unset($this->started_time);
    }

    /**
     * Generated from protobuf field <code>.google.protobuf.Timestamp started_time = 4 [(.gogoproto.stdtime) = true];</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setStartedTime($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->started_time = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>int32 attempt = 5;</code>
     * @return int
     */
    public function getAttempt()
    {
        return $this->attempt;
    }

    /**
     * Generated from protobuf field <code>int32 attempt = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setAttempt($var)
    {
        GPBUtil::checkInt32($var);
        $this->attempt = $var;

        return $this;
    }

}

